import os
import sipconfig
import PyQt4.pyqtconfig as pyqtconfig

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "avogadro.sbf"

# Get the PyQt configuration information.
config = pyqtconfig.Configuration()

# Get the extra SIP flags needed by the imported qt module.  Note that
# this normally only includes those flags (-x and -t) that relate to SIP's
# versioning system.
#qt_sip_flags = config.pyqt_qt_sip_flags
qt_sip_flags = config.pyqt_sip_flags
print "qt_sip_flags =", qt_sip_flags
print "pyqt_sip_dir =", config.pyqt_sip_dir

# Run SIP to generate the code.  Note that we tell SIP where to find the qt
# module's specification files using the -I flag.
os.system(" ".join([config.sip_bin, "-c", ".", "-b", build_file, "-I", config.pyqt_sip_dir, qt_sip_flags, "avogadro.sip"]))

# We are going to install the SIP specification file for this module and
# its configuration module.
installs = []

installs.append(["avogadro.sip", os.path.join(config.default_sip_dir, "avogadro")])

# Create the Makefile.  The QtModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
#makefile = pyqtconfig.QtGuiModuleMakefile(
makefile = pyqtconfig.QtOpenGLModuleMakefile(
    configuration=config,
    build_file=build_file,
    installs=installs
)

# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
# ".dll" extension on Windows).
makefile.extra_libs = ["openbabel", "avogadro"]

# Generate the Makefile itself.
makefile.generate()
